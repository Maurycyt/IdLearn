        -:    0:Source:/usr/include/c++/11/bits/allocator.h
        -:    0:Graph:/home/maurycyt/Documents/IO/idlearn/defaultProblemPackages/test/cmake-build-debug-coverage/CMakeFiles/packageUtilsTest.dir/packageUtilsTest.cpp.gcno
        -:    0:Data:/home/maurycyt/Documents/IO/idlearn/defaultProblemPackages/test/cmake-build-debug-coverage/CMakeFiles/packageUtilsTest.dir/packageUtilsTest.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  /// allocator<void> specialization.
        -:   64:  template<>
        -:   65:    class allocator<void>
        -:   66:    {
        -:   67:    public:
        -:   68:      typedef void        value_type;
        -:   69:      typedef size_t      size_type;
        -:   70:      typedef ptrdiff_t   difference_type;
        -:   71:#if __cplusplus <= 201703L
        -:   72:      typedef void*       pointer;
        -:   73:      typedef const void* const_pointer;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef allocator<_Tp1> other; };
        -:   78:#else
        -:   79:      allocator() = default;
        -:   80:
        -:   81:      template<typename _Up>
        -:   82:	constexpr
        -:   83:	allocator(const allocator<_Up>&) { }
        -:   84:#endif // ! C++20
        -:   85:
        -:   86:#if __cplusplus >= 201103L && __cplusplus <= 201703L
        -:   87:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   88:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   89:      typedef true_type propagate_on_container_move_assignment;
        -:   90:
        -:   91:      typedef true_type is_always_equal;
        -:   92:
        -:   93:      template<typename _Up, typename... _Args>
        -:   94:	void
        -:   95:	construct(_Up* __p, _Args&&... __args)
        -:   96:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        -:   97:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        -:   98:
        -:   99:      template<typename _Up>
        -:  100:	void
        -:  101:	destroy(_Up* __p)
        -:  102:	noexcept(std::is_nothrow_destructible<_Up>::value)
        -:  103:	{ __p->~_Up(); }
        -:  104:#endif // C++11 to C++17
        -:  105:    };
        -:  106:
        -:  107:  /**
        -:  108:   * @brief  The @a standard allocator, as per [20.4].
        -:  109:   *
        -:  110:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  111:   *  for further details.
        -:  112:   *
        -:  113:   *  @tparam  _Tp  Type of allocated object.
        -:  114:   */
        -:  115:  template<typename _Tp>
        -:  116:    class allocator : public __allocator_base<_Tp>
        -:  117:    {
        -:  118:    public:
        -:  119:      typedef _Tp        value_type;
        -:  120:      typedef size_t     size_type;
        -:  121:      typedef ptrdiff_t  difference_type;
        -:  122:#if __cplusplus <= 201703L
        -:  123:      typedef _Tp*       pointer;
        -:  124:      typedef const _Tp* const_pointer;
        -:  125:      typedef _Tp&       reference;
        -:  126:      typedef const _Tp& const_reference;
        -:  127:
        -:  128:      template<typename _Tp1>
        -:  129:	struct rebind
        -:  130:	{ typedef allocator<_Tp1> other; };
        -:  131:#endif
        -:  132:
        -:  133:#if __cplusplus >= 201103L
        -:  134:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  135:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  136:      typedef true_type propagate_on_container_move_assignment;
        -:  137:
        -:  138:      typedef true_type is_always_equal;
        -:  139:#endif
        -:  140:
        -:  141:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  142:      // 3035. std::allocator's constructors should be constexpr
        -:  143:      _GLIBCXX20_CONSTEXPR
       31:  144:      allocator() _GLIBCXX_NOTHROW { }
call    0 returned 1
        1:  144-block  0
call    1 returned 1
call    2 returned 1
        1:  144-block  1
call    3 returned 1
call    4 returned 1
        1:  144-block  2
call    5 returned 1
        1:  144-block  3
call    6 returned 1
call    7 returned 1
        1:  144-block  4
call    8 returned 1
        1:  144-block  5
call    9 returned 1
call   10 returned 1
        1:  144-block  6
call   11 returned 1
        1:  144-block  7
call   12 returned 1
call   13 returned 1
        1:  144-block  8
call   14 returned 1
        1:  144-block  9
call   15 returned 1
        1:  144-block 10
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:  144-block 11
call   19 returned 1
branch 20 taken 1 (fallthrough)
branch 21 taken 0 (throw)
        1:  144-block 12
branch 22 taken 0 (fallthrough)
branch 23 taken 1
        1:  144-block 13
call   24 returned 1
branch 25 taken 1 (fallthrough)
branch 26 taken 0 (throw)
        1:  144-block 14
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1:  144-block 15
branch 30 taken 0 (fallthrough)
branch 31 taken 1
        1:  144-block 16
call   32 returned 1
branch 33 taken 1 (fallthrough)
branch 34 taken 0 (throw)
        1:  144-block 17
branch 35 taken 0 (fallthrough)
branch 36 taken 1
        1:  144-block 18
call   37 returned 1
branch 38 taken 1 (fallthrough)
branch 39 taken 0 (throw)
        1:  144-block 19
branch 40 taken 0 (fallthrough)
branch 41 taken 1
        1:  144-block 20
call   42 returned 1
branch 43 taken 1 (fallthrough)
branch 44 taken 0 (throw)
        1:  144-block 21
branch 45 taken 0 (fallthrough)
branch 46 taken 1
        1:  144-block 22
call   47 returned 1
branch 48 taken 1 (fallthrough)
branch 49 taken 0 (throw)
        1:  144-block 23
branch 50 taken 0 (fallthrough)
branch 51 taken 1
        1:  144-block 24
call   52 returned 1
branch 53 taken 1 (fallthrough)
branch 54 taken 0 (throw)
        1:  144-block 25
call   55 returned 1
branch 56 taken 1 (fallthrough)
branch 57 taken 0 (throw)
        1:  144-block 26
call   58 returned 1
branch 59 taken 1 (fallthrough)
branch 60 taken 0 (throw)
        1:  144-block 27
call   61 returned 1
branch 62 taken 1 (fallthrough)
branch 63 taken 0 (throw)
        1:  144-block 28
call   64 returned 1
branch 65 taken 1 (fallthrough)
branch 66 taken 0 (throw)
        1:  144-block 29
call   67 returned 1
branch 68 taken 1 (fallthrough)
branch 69 taken 0 (throw)
        1:  144-block 30
call   70 returned 1
branch 71 taken 1 (fallthrough)
branch 72 taken 0 (throw)
        1:  144-block 31
call   73 returned 1
branch 74 taken 1 (fallthrough)
branch 75 taken 0 (throw)
        1:  144-block 32
call   76 returned 1
branch 77 taken 1 (fallthrough)
branch 78 taken 0 (throw)
        1:  144-block 33
call   79 returned 1
branch 80 taken 1 (fallthrough)
branch 81 taken 0 (throw)
        1:  144-block 34
call   82 returned 1
branch 83 taken 1 (fallthrough)
branch 84 taken 0 (throw)
        1:  144-block 35
call   85 returned 1
branch 86 taken 1 (fallthrough)
branch 87 taken 0 (throw)
        1:  144-block 36
call   88 returned 1
branch 89 taken 1 (fallthrough)
branch 90 taken 0 (throw)
        1:  144-block 37
call   91 returned 1
branch 92 taken 1 (fallthrough)
branch 93 taken 0 (throw)
        1:  144-block 38
call   94 returned 1
branch 95 taken 1 (fallthrough)
branch 96 taken 0 (throw)
        1:  144-block 39
call   97 returned 1
branch 98 taken 1 (fallthrough)
branch 99 taken 0 (throw)
        1:  144-block 40
call   100 returned 1
branch 101 taken 1 (fallthrough)
branch 102 taken 0 (throw)
        1:  144-block 41
call   103 returned 1
branch 104 taken 1 (fallthrough)
branch 105 taken 0 (throw)
        1:  144-block 42
call   106 returned 1
branch 107 taken 1 (fallthrough)
branch 108 taken 0 (throw)
        1:  144-block 43
call   109 returned 1
branch 110 taken 1 (fallthrough)
branch 111 taken 0 (throw)
        1:  144-block 44
call   112 returned 1
branch 113 taken 0 (throw)
branch 114 taken 1 (fallthrough)
        -:  145:
        -:  146:      _GLIBCXX20_CONSTEXPR
      199:  147:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
       20:  147-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
        1:  147-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1:  147-block  2
branch  5 taken 0 (fallthrough)
branch  6 taken 1
        1:  147-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 1
        1:  147-block  4
branch  9 taken 0 (fallthrough)
branch 10 taken 1
        1:  147-block  5
branch 11 taken 0 (fallthrough)
branch 12 taken 1
        1:  147-block  6
branch 13 taken 0 (fallthrough)
branch 14 taken 1
        1:  147-block  7
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  147-block  8
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1:  147-block  9
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  147-block 10
call   24 returned 1
branch 25 taken 1 (fallthrough)
branch 26 taken 0 (throw)
        1:  147-block 11
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1:  147-block 12
call   30 returned 1
branch 31 taken 1 (fallthrough)
branch 32 taken 0 (throw)
        4:  147-block 13
call   33 returned 4
branch 34 taken 4 (fallthrough)
branch 35 taken 0 (throw)
        8:  147-block 14
call   36 returned 8
branch 37 taken 8 (fallthrough)
branch 38 taken 0 (throw)
        1:  147-block 15
branch 39 taken 0 (fallthrough)
branch 40 taken 1
        1:  147-block 16
branch 41 taken 0 (fallthrough)
branch 42 taken 1
       20:  147-block 17
call   43 returned 20
branch 44 taken 20 (fallthrough)
branch 45 taken 0 (throw)
        1:  147-block 18
branch 46 taken 0 (fallthrough)
branch 47 taken 1
       20:  147-block 19
call   48 returned 20
branch 49 taken 20 (fallthrough)
branch 50 taken 0 (throw)
        1:  147-block 20
branch 51 taken 0 (fallthrough)
branch 52 taken 1
       20:  147-block 21
call   53 returned 20
branch 54 taken 20 (fallthrough)
branch 55 taken 0 (throw)
        1:  147-block 22
branch 56 taken 0 (fallthrough)
branch 57 taken 1
       20:  147-block 23
call   58 returned 20
branch 59 taken 20 (fallthrough)
branch 60 taken 0 (throw)
        1:  147-block 24
branch 61 taken 0 (fallthrough)
branch 62 taken 1
       20:  147-block 25
call   63 returned 20
branch 64 taken 20 (fallthrough)
branch 65 taken 0 (throw)
        1:  147-block 26
branch 66 taken 0 (fallthrough)
branch 67 taken 1
       20:  147-block 27
call   68 returned 20
branch 69 taken 20 (fallthrough)
branch 70 taken 0 (throw)
        1:  147-block 28
call   71 returned 1
branch 72 taken 1 (fallthrough)
branch 73 taken 0 (throw)
       27:  147-block 29
branch 74 taken 27 (fallthrough)
branch 75 taken 0
      193:  148:      : __allocator_base<_Tp>(__a) { }
       20:  148-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
        1:  148-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1:  148-block  2
branch  5 taken 0 (fallthrough)
branch  6 taken 1
        1:  148-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 1
        1:  148-block  4
branch  9 taken 0 (fallthrough)
branch 10 taken 1
        1:  148-block  5
branch 11 taken 0 (fallthrough)
branch 12 taken 1
        1:  148-block  6
branch 13 taken 0 (fallthrough)
branch 14 taken 1
        1:  148-block  7
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  148-block  8
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1:  148-block  9
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  148-block 10
call   24 returned 1
branch 25 taken 1 (fallthrough)
branch 26 taken 0 (throw)
        1:  148-block 11
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
        1:  148-block 12
call   30 returned 1
branch 31 taken 1 (fallthrough)
branch 32 taken 0 (throw)
        4:  148-block 13
call   33 returned 4
branch 34 taken 4 (fallthrough)
branch 35 taken 0 (throw)
        8:  148-block 14
call   36 returned 8
branch 37 taken 8 (fallthrough)
branch 38 taken 0 (throw)
        1:  148-block 15
branch 39 taken 0 (fallthrough)
branch 40 taken 1
       20:  148-block 16
call   41 returned 20
branch 42 taken 20 (fallthrough)
branch 43 taken 0 (throw)
       20:  148-block 17
call   44 returned 20
branch 45 taken 20 (fallthrough)
branch 46 taken 0 (throw)
       20:  148-block 18
call   47 returned 20
branch 48 taken 20 (fallthrough)
branch 49 taken 0 (throw)
       20:  148-block 19
call   50 returned 20
branch 51 taken 20 (fallthrough)
branch 52 taken 0 (throw)
       20:  148-block 20
call   53 returned 20
branch 54 taken 20 (fallthrough)
branch 55 taken 0 (throw)
       20:  148-block 21
call   56 returned 20
branch 57 taken 20 (fallthrough)
branch 58 taken 0 (throw)
        1:  148-block 22
call   59 returned 1
branch 60 taken 1 (fallthrough)
branch 61 taken 0 (throw)
       27:  148-block 23
branch 62 taken 27 (fallthrough)
branch 63 taken 0
        -:  149:
        -:  150:#if __cplusplus >= 201103L
        -:  151:      // Avoid implicit deprecation.
        -:  152:      allocator& operator=(const allocator&) = default;
        -:  153:#endif
        -:  154:
        -:  155:      template<typename _Tp1>
        -:  156:	_GLIBCXX20_CONSTEXPR
       12:  157:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
        4:  157-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        8:  157-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        -:  158:
        -:  159:#if __cpp_constexpr_dynamic_alloc
        -:  160:      constexpr
        -:  161:#endif
      335:  162:      ~allocator() _GLIBCXX_NOTHROW { }
       20:  162-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
        1:  162-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1:  162-block  2
branch  5 taken 0 (fallthrough)
branch  6 taken 1
        1:  162-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 1
        1:  162-block  4
branch  9 taken 0 (fallthrough)
branch 10 taken 1
        1:  162-block  5
branch 11 taken 0 (fallthrough)
branch 12 taken 1
        1:  162-block  6
branch 13 taken 0 (fallthrough)
branch 14 taken 1
       20:  162-block  7
        4:  162-block  8
call   15 returned 4
branch 16 taken 4 (fallthrough)
branch 17 taken 0 (throw)
        8:  162-block  9
call   18 returned 8
branch 19 taken 8 (fallthrough)
branch 20 taken 0 (throw)
        1:  162-block 10
branch 21 taken 0 (fallthrough)
branch 22 taken 1
        1:  162-block 11
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  162-block 12
branch 26 taken 0 (fallthrough)
branch 27 taken 1
        1:  162-block 13
branch 28 taken 0 (fallthrough)
branch 29 taken 1
       20:  162-block 14
call   30 returned 20
branch 31 taken 20 (fallthrough)
branch 32 taken 0 (throw)
       20:  162-block 15
        1:  162-block 16
call   33 returned 1
call   34 returned 1
call   35 returned 1
    $$$$$:  162-block 17
    $$$$$:  162-block 18
    $$$$$:  162-block 19
        1:  162-block 20
call   36 returned 1
branch 37 taken 1 (fallthrough)
branch 38 taken 0 (throw)
        1:  162-block 21
branch 39 taken 0 (fallthrough)
branch 40 taken 1
        1:  162-block 22
branch 41 taken 0 (fallthrough)
branch 42 taken 1
       20:  162-block 23
call   43 returned 20
branch 44 taken 20 (fallthrough)
branch 45 taken 0 (throw)
       20:  162-block 24
        1:  162-block 25
call   46 returned 1
call   47 returned 1
call   48 returned 1
    $$$$$:  162-block 26
    $$$$$:  162-block 27
    $$$$$:  162-block 28
        1:  162-block 29
branch 49 taken 0 (fallthrough)
branch 50 taken 1
        1:  162-block 30
branch 51 taken 0 (fallthrough)
branch 52 taken 1
       20:  162-block 31
call   53 returned 20
branch 54 taken 20 (fallthrough)
branch 55 taken 0 (throw)
       20:  162-block 32
        1:  162-block 33
call   56 returned 1
call   57 returned 1
call   58 returned 1
    $$$$$:  162-block 34
    $$$$$:  162-block 35
    $$$$$:  162-block 36
        1:  162-block 37
branch 59 taken 0 (fallthrough)
branch 60 taken 1
        1:  162-block 38
branch 61 taken 0 (fallthrough)
branch 62 taken 1
       20:  162-block 39
call   63 returned 20
branch 64 taken 20 (fallthrough)
branch 65 taken 0 (throw)
       20:  162-block 40
        1:  162-block 41
call   66 returned 1
call   67 returned 1
call   68 returned 1
    $$$$$:  162-block 42
    $$$$$:  162-block 43
    $$$$$:  162-block 44
        1:  162-block 45
branch 69 taken 0 (fallthrough)
branch 70 taken 1
        1:  162-block 46
branch 71 taken 0 (fallthrough)
branch 72 taken 1
       20:  162-block 47
call   73 returned 20
branch 74 taken 20 (fallthrough)
branch 75 taken 0 (throw)
       20:  162-block 48
        1:  162-block 49
call   76 returned 1
call   77 returned 1
call   78 returned 1
    $$$$$:  162-block 50
    $$$$$:  162-block 51
    $$$$$:  162-block 52
        1:  162-block 53
branch 79 taken 0 (fallthrough)
branch 80 taken 1
        1:  162-block 54
branch 81 taken 0 (fallthrough)
branch 82 taken 1
       20:  162-block 55
call   83 returned 20
branch 84 taken 20 (fallthrough)
branch 85 taken 0 (throw)
       20:  162-block 56
        1:  162-block 57
call   86 returned 1
call   87 returned 1
call   88 returned 1
    $$$$$:  162-block 58
    $$$$$:  162-block 59
    $$$$$:  162-block 60
       20:  162-block 61
        1:  162-block 62
    $$$$$:  162-block 63
    $$$$$:  162-block 64
call   89 never executed
        -:  163:
        -:  164:#if __cplusplus > 201703L
        -:  165:      [[nodiscard,__gnu__::__always_inline__]]
        -:  166:      constexpr _Tp*
       68:  167:      allocate(size_t __n)
        -:  168:      {
        -:  169:#ifdef __cpp_lib_is_constant_evaluated
        -:  170:	if (std::is_constant_evaluated())
        -:  171:	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  172:#endif
       68:  173:	return __allocator_base<_Tp>::allocate(__n, 0);
        1:  173-block  0
call    0 returned 1
        1:  173-block  1
call    1 returned 1
        1:  173-block  2
call    2 returned 1
        1:  173-block  3
call    3 returned 1
        1:  173-block  4
call    4 returned 1
        1:  173-block  5
call    5 returned 1
       12:  173-block  6
call    6 returned 12
       49:  173-block  7
call    7 returned 49
        1:  173-block  8
call    8 returned 1
        -:  174:      }
        -:  175:
        -:  176:      [[__gnu__::__always_inline__]]
        -:  177:      constexpr void
      68*:  178:      deallocate(_Tp* __p, size_t __n)
        -:  179:      {
        -:  180:#ifdef __cpp_lib_is_constant_evaluated
        -:  181:	if (std::is_constant_evaluated())
        -:  182:	  {
        -:  183:	    ::operator delete(__p);
        -:  184:	    return;
        -:  185:	  }
        -:  186:#endif
      68*:  187:	  __allocator_base<_Tp>::deallocate(__p, __n);
       12:  187-block  0
call    0 returned 12
        6:  187-block  1
call    1 returned 6
    $$$$$:  187-block  2
call    2 never executed
    $$$$$:  187-block  3
call    3 never executed
    $$$$$:  187-block  4
call    4 never executed
    $$$$$:  187-block  5
call    5 never executed
    $$$$$:  187-block  6
call    6 never executed
    $$$$$:  187-block  7
call    7 never executed
    %%%%%:  187-block  8
call    8 never executed
        6:  187-block  9
call    9 returned 6
        1:  187-block 10
call   10 returned 1
    $$$$$:  187-block 11
call   11 never executed
    $$$$$:  187-block 12
call   12 never executed
    $$$$$:  187-block 13
call   13 never executed
    %%%%%:  187-block 14
call   14 never executed
        6:  187-block 15
call   15 returned 6
        1:  187-block 16
call   16 returned 1
    $$$$$:  187-block 17
call   17 never executed
    $$$$$:  187-block 18
call   18 never executed
    $$$$$:  187-block 19
call   19 never executed
    %%%%%:  187-block 20
call   20 never executed
        6:  187-block 21
call   21 returned 6
        1:  187-block 22
call   22 returned 1
    $$$$$:  187-block 23
call   23 never executed
    $$$$$:  187-block 24
call   24 never executed
    $$$$$:  187-block 25
call   25 never executed
    %%%%%:  187-block 26
call   26 never executed
        6:  187-block 27
call   27 returned 6
        1:  187-block 28
call   28 returned 1
    $$$$$:  187-block 29
call   29 never executed
    $$$$$:  187-block 30
call   30 never executed
    $$$$$:  187-block 31
call   31 never executed
    %%%%%:  187-block 32
call   32 never executed
        6:  187-block 33
call   33 returned 6
        1:  187-block 34
call   34 returned 1
    $$$$$:  187-block 35
call   35 never executed
    $$$$$:  187-block 36
call   36 never executed
    $$$$$:  187-block 37
call   37 never executed
    %%%%%:  187-block 38
call   38 never executed
        6:  187-block 39
call   39 returned 6
        1:  187-block 40
call   40 returned 1
    $$$$$:  187-block 41
call   41 never executed
    $$$$$:  187-block 42
call   42 never executed
    $$$$$:  187-block 43
call   43 never executed
        1:  187-block 44
call   44 returned 1
    $$$$$:  187-block 45
call   45 never executed
        1:  187-block 46
call   46 returned 1
        6:  187-block 47
call   47 returned 6
    $$$$$:  187-block 48
call   48 never executed
        -:  188:      }
        -:  189:#endif // C++20
        -:  190:
        -:  191:      friend _GLIBCXX20_CONSTEXPR bool
        -:  192:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  193:      { return true; }
        -:  194:
        -:  195:#if __cpp_impl_three_way_comparison < 201907L
        -:  196:      friend _GLIBCXX20_CONSTEXPR bool
        -:  197:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  198:      { return false; }
        -:  199:#endif
        -:  200:
        -:  201:      // Inherit everything else.
        -:  202:    };
        -:  203:
        -:  204:  template<typename _T1, typename _T2>
        -:  205:    inline _GLIBCXX20_CONSTEXPR bool
        -:  206:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  207:    _GLIBCXX_NOTHROW
        -:  208:    { return true; }
        -:  209:
        -:  210:#if __cpp_impl_three_way_comparison < 201907L
        -:  211:  template<typename _T1, typename _T2>
        -:  212:    inline _GLIBCXX20_CONSTEXPR bool
        -:  213:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  214:    _GLIBCXX_NOTHROW
        -:  215:    { return false; }
        -:  216:#endif
        -:  217:
        -:  218:  // Invalid allocator<cv T> partial specializations.
        -:  219:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  220:  template<typename _Tp>
        -:  221:    class allocator<const _Tp>
        -:  222:    {
        -:  223:    public:
        -:  224:      typedef _Tp value_type;
        -:  225:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  226:    };
        -:  227:
        -:  228:  template<typename _Tp>
        -:  229:    class allocator<volatile _Tp>
        -:  230:    {
        -:  231:    public:
        -:  232:      typedef _Tp value_type;
        -:  233:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  234:    };
        -:  235:
        -:  236:  template<typename _Tp>
        -:  237:    class allocator<const volatile _Tp>
        -:  238:    {
        -:  239:    public:
        -:  240:      typedef _Tp value_type;
        -:  241:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  242:    };
        -:  243:
        -:  244:  /// @} group allocator
        -:  245:
        -:  246:  // Inhibit implicit instantiations for required instantiations,
        -:  247:  // which are defined via explicit instantiations elsewhere.
        -:  248:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  249:  extern template class allocator<char>;
        -:  250:  extern template class allocator<wchar_t>;
        -:  251:#endif
        -:  252:
        -:  253:  // Undefine.
        -:  254:#undef __allocator_base
        -:  255:
        -:  256:  // To implement Option 3 of DR 431.
        -:  257:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  258:    struct __alloc_swap
        -:  259:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  260:
        -:  261:  template<typename _Alloc>
        -:  262:    struct __alloc_swap<_Alloc, false>
        -:  263:    {
        -:  264:      static void
        -:  265:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  266:      {
        -:  267:	// Precondition: swappable allocators.
        -:  268:	if (__one != __two)
        -:  269:	  swap(__one, __two);
        -:  270:      }
        -:  271:    };
        -:  272:
        -:  273:  // Optimize for stateless allocators.
        -:  274:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  275:    struct __alloc_neq
        -:  276:    {
        -:  277:      static bool
        -:  278:      _S_do_it(const _Alloc&, const _Alloc&)
        -:  279:      { return false; }
        -:  280:    };
        -:  281:
        -:  282:  template<typename _Alloc>
        -:  283:    struct __alloc_neq<_Alloc, false>
        -:  284:    {
        -:  285:      static bool
        -:  286:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  287:      { return __one != __two; }
        -:  288:    };
        -:  289:
        -:  290:#if __cplusplus >= 201103L
        -:  291:  template<typename _Tp, bool
        -:  292:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  293:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  294:    struct __shrink_to_fit_aux
        -:  295:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  296:
        -:  297:  template<typename _Tp>
        -:  298:    struct __shrink_to_fit_aux<_Tp, true>
        -:  299:    {
        -:  300:      static bool
        -:  301:      _S_do_it(_Tp& __c) noexcept
        -:  302:      {
        -:  303:#if __cpp_exceptions
        -:  304:	try
        -:  305:	  {
        -:  306:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  307:		__make_move_if_noexcept_iterator(__c.end()),
        -:  308:		__c.get_allocator()).swap(__c);
        -:  309:	    return true;
        -:  310:	  }
        -:  311:	catch(...)
        -:  312:	  { return false; }
        -:  313:#else
        -:  314:	return false;
        -:  315:#endif
        -:  316:      }
        -:  317:    };
        -:  318:#endif
        -:  319:
        -:  320:_GLIBCXX_END_NAMESPACE_VERSION
        -:  321:} // namespace std
        -:  322:
        -:  323:#endif
